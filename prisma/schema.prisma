// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  hashedPassword   String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  conversationIds  String[]  @db.ObjectId
  conversations    Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds   String[]  @db.ObjectId
  seenMessages     Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts         Account[]
  messages         Message[]

  // Mối quan hệ bạn bè (nhiều-nhiều) cho MongoDB
  friendIds        String[]  @db.ObjectId
  friends          User[]    @relation("Friendship", fields: [friendIds], references: [id])
  friendOfIds      String[]  @db.ObjectId
  friendOf         User[]    @relation("Friendship", fields: [friendOfIds], references: [id])

  // Lời mời đã gửi
  sentFriendRequests     FriendRequest[] @relation("SentRequests")
  // Lời mời đã nhận
  receivedFriendRequests FriendRequest[] @relation("ReceivedRequests")
  birthDate       DateTime?
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Conversation {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  createdAt       DateTime  @default(now())
  lastMessageAt   DateTime  @default(now())
  name            String?
  isGroup         Boolean?

  messageIds      String[]  @db.ObjectId
  messages        Message[]

  userIds         String[]  @db.ObjectId
  users           User[]    @relation(fields: [userIds], references: [id])
}


model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds   String[] @db.ObjectId
  seen      User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model FriendRequest {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String        @db.ObjectId
  receiverId String        @db.ObjectId
  status     RequestStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  // Quan hệ với người gửi
  sender     User          @relation("SentRequests", fields: [senderId], references: [id], onDelete: Cascade)
  // Quan hệ với người nhận
  receiver   User          @relation("ReceivedRequests", fields: [receiverId], references: [id], onDelete: Cascade)

  // Đảm bảo không có 2 lời mời trùng lặp
  @@unique([senderId, receiverId])
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}